// generic drawing of more complex things


// ripple effect animations

@keyframes ripple_effect {
  to { background-size: 1000% 1000%; }
}

@keyframes scale_ripple_effect {
  to { background-size: auto, 1000% 1000%; }
}

@keyframes header_ripple_effect {
  from {
    background-image: radial-gradient(circle,
                                      $primary_color 0%,
                                      transparent 0%);
  }

  to {
    background-image: radial-gradient(circle,
                                      $primary_color 100%,
                                      transparent 0%);
  }
}


@mixin entry($t, $fc: $primary_color) {
//
// entry
//
// $t: entry type
// $fc: focus color
//

  @if $t == normal {
    transition: $shorter_transition;
    border-image: none;
    box-shadow: $shadow_1;
    background-color: if($fc == $primary_color, $button_bg_color, $fc);
    color: if($fc == $primary_color, $fg_color, $inverse_fg_color);
  }

  @if $t == focus {
    border-image: none;
    box-shadow: $shadow_2;
  }

  @if $t == disabled {
    box-shadow: none;
    background-color: $alt_base_color;
    color: $disabled_fg_color;
  }

  @if $t == flat-normal {
    transition: $shorter_transition, box-shadow $longer_duration $deceleration_curve;
    box-shadow: inset 0 -1px if($fc == $primary_color, $track_color, $fc), inset 0 -2px transparent;
    background-color: transparent;
    color: $fg_color;
  }

  @if $t == flat-focus {
    box-shadow: inset 0 -1px transparent, inset 0 -2px $fc;
  }

  @if $t == flat-disabled {
    box-shadow: inset 0 -1px $divider_color, inset 0 -2px transparent;
    background-color: transparent;
    color: $disabled_fg_color;
  }
}


@mixin button($t, $c: $lighter_bg_color) {
//
// button
//
// $t: button type
// $c: base color
//

  @if $t == normal {
    transition: $shorter_duration;
    box-shadow: $shadow_1, inset 0 0 0 9999px transparent;
    background-color: $button_bg_color;
    color: $button_fg_color;
  }

  @if $t == hover {
    box-shadow: $shadow_2, inset 0 0 0 9999px transparent;
    color: $fg_color;
  }

  @if $t == active {
    box-shadow: $shadow_2, inset 0 0 0 9999px $semi_fill_color;
    color: $fg_color;
  }

  @if $t == disabled {
    box-shadow: none;
    background-color: $alt_base_color;
    color: if($c == $lighter_bg_color, $disabled_secondary_fg_color, $disabled_fg_color);
  }

  @if $t == checked {
    background-color: $primary_color;
    color: $inverse_fg_color;
    background-image: $theme_image;
    background-size: auto auto;
    background-position: center center;
    background-repeat: no-repeat;
  }

  @if $t == checked-disabled {
    background-color: rgba($primary_color, $lower_opacity);
    color: rgba($primary_color, $disabled_opacity);
    background-image: none;
  }

  @if $t == flat-normal {
    transition: $shorter_duration;
    box-shadow: inset 0 0 0 9999px transparent;
    background-color: transparent;
    color: $secondary_fg_color;
  }

  @if $t == flat-hover {
    box-shadow: inset 0 0 0 9999px $semi_fill_color;
    color: $fg_color;
  }

  @if $t == flat-active {
    box-shadow: inset 0 0 0 9999px $fill_color;
    color: $fg_color;
    background-image: none;
  }

  @if $t == flat-disabled {
    box-shadow: none;
    background-color: transparent;
    color: if($c == $lighter_bg_color, $disabled_secondary_fg_color, $disabled_fg_color);
  }

  @if $t == flat-checked {
    background-color: $track_color;
    color: $fg_color;
    background-image: none;
  }

  @if $t == flat-checked-disabled {
    background-color: $divider_color;
    color: $disabled_fg_color;
    background-image: none;
  }
}


@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==right or $p==left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: transparentize($c, 0.93);

  @if $c==$fg_color {
    $_small_gradient_color: darken($border_color, 10%);
    $_big_gradient_color: transparentize($fg_color, 0.93);

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: radial-gradient(farthest-side at $p,
                                    $_small_gradient_color 85%,
                                    transparentize($_small_gradient_color, 1));

  $_big_gradient: radial-gradient(farthest-side at $p,
                                  $_big_gradient_color,
                                  transparentize($_big_gradient_color, 1));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}


@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: $track_color;
  $_undershoot_color_light: rgba($base_color, $lower_opacity);

  $_gradient_dir: left;
  $_dash_bg_size: 12px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: left $p;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 12px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p top;
  }

  background-color: transparent; // shouldn't be needed, but better to be sure

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
}
